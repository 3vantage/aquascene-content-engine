{"ast":null,"code":"import axios from'axios';import{API_CONFIG,REQUEST_CONFIG}from'../config/api';// Create axios instance with default configuration\nconst apiClient=axios.create(REQUEST_CONFIG);// Service health checker\nexport const checkServiceHealth=async serviceName=>{try{const serviceConfig=API_CONFIG[serviceName];if(!serviceConfig){throw new Error(`Unknown service: ${serviceName}`);}const healthUrl=`${serviceConfig.url}${serviceConfig.endpoints.health}`;const response=await apiClient.get(healthUrl);return{service:serviceName,status:response.data.status==='healthy'||response.data.status==='ok'||response.status===200?'online':'offline',lastCheck:new Date().toISOString(),responseTime:response.headers['x-response-time']||'N/A',data:response.data};}catch(error){return{service:serviceName,status:'offline',lastCheck:new Date().toISOString(),error:error.message};}};// Check all services health\nexport const checkAllServicesHealth=async()=>{const services=Object.keys(API_CONFIG);const results=await Promise.allSettled(services.map(service=>checkServiceHealth(service)));const statuses={};results.forEach((result,index)=>{const serviceName=services[index];if(result.status==='fulfilled'){statuses[getServiceDisplayName(serviceName)]=result.value;}else{var _result$reason;statuses[getServiceDisplayName(serviceName)]={service:serviceName,status:'offline',lastCheck:new Date().toISOString(),error:((_result$reason=result.reason)===null||_result$reason===void 0?void 0:_result$reason.message)||'Unknown error'};}});return statuses;};// Get service statistics\nexport const getServiceStats=async serviceName=>{try{const serviceConfig=API_CONFIG[serviceName];if(!serviceConfig||!serviceConfig.endpoints.stats){throw new Error(`Stats endpoint not available for service: ${serviceName}`);}const statsUrl=`${serviceConfig.url}${serviceConfig.endpoints.stats}`;const response=await apiClient.get(statsUrl);return response.data;}catch(error){console.warn(`Failed to fetch ${serviceName} stats:`,error.message);return null;}};// Get all service statistics\nexport const getAllServiceStats=async()=>{const stats={subscribers:0,content:0,scrapeJobs:0,aiJobs:0};try{// Fetch subscriber stats\nconst subscriberStats=await getServiceStats('subscriberManager');if(subscriberStats){stats.subscribers=subscriberStats.total_subscribers||0;}}catch(error){console.warn('Failed to fetch subscriber stats:',error.message);}try{// Fetch scraper stats\nconst scraperStats=await getServiceStats('webScraper');if(scraperStats){var _scraperStats$stats;stats.scrapeJobs=((_scraperStats$stats=scraperStats.stats)===null||_scraperStats$stats===void 0?void 0:_scraperStats$stats.total_jobs)||scraperStats.total_jobs||0;}}catch(error){console.warn('Failed to fetch scraper stats:',error.message);}try{// Fetch content stats\nconst contentStats=await getServiceStats('contentManager');if(contentStats){stats.content=contentStats.total_content||0;}}catch(error){console.warn('Failed to fetch content stats:',error.message);}try{// Fetch AI processor stats\nconst aiStats=await getServiceStats('aiProcessor');if(aiStats){stats.aiJobs=aiStats.total_jobs||0;}}catch(error){console.warn('Failed to fetch AI processor stats:',error.message);}return stats;};// Helper function to get display names for services\nconst getServiceDisplayName=serviceName=>{const displayNames={contentManager:'Content Manager',aiProcessor:'AI Processor',webScraper:'Web Scraper',distributor:'Distributor',subscriberManager:'Subscriber Manager'};return displayNames[serviceName]||serviceName;};// Generic API call function\nexport const makeApiCall=async function(serviceName,endpoint){let method=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'GET';let data=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;try{const serviceConfig=API_CONFIG[serviceName];if(!serviceConfig){throw new Error(`Unknown service: ${serviceName}`);}const url=`${serviceConfig.url}${serviceConfig.endpoints[endpoint]||endpoint}`;const config={method,url,...REQUEST_CONFIG};if(data&&(method==='POST'||method==='PUT'||method==='PATCH')){config.data=data;}const response=await axios(config);return response.data;}catch(error){console.error(`API call failed for ${serviceName}/${endpoint}:`,error.message);throw error;}};export default apiClient;","map":{"version":3,"names":["axios","API_CONFIG","REQUEST_CONFIG","apiClient","create","checkServiceHealth","serviceName","serviceConfig","Error","healthUrl","url","endpoints","health","response","get","service","status","data","lastCheck","Date","toISOString","responseTime","headers","error","message","checkAllServicesHealth","services","Object","keys","results","Promise","allSettled","map","statuses","forEach","result","index","getServiceDisplayName","value","_result$reason","reason","getServiceStats","stats","statsUrl","console","warn","getAllServiceStats","subscribers","content","scrapeJobs","aiJobs","subscriberStats","total_subscribers","scraperStats","_scraperStats$stats","total_jobs","contentStats","total_content","aiStats","displayNames","contentManager","aiProcessor","webScraper","distributor","subscriberManager","makeApiCall","endpoint","method","arguments","length","undefined","config"],"sources":["/Users/kg/aquascene-content-engine/admin-dashboard/src/utils/apiClient.js"],"sourcesContent":["import axios from 'axios';\nimport { API_CONFIG, REQUEST_CONFIG } from '../config/api';\n\n// Create axios instance with default configuration\nconst apiClient = axios.create(REQUEST_CONFIG);\n\n// Service health checker\nexport const checkServiceHealth = async (serviceName) => {\n  try {\n    const serviceConfig = API_CONFIG[serviceName];\n    if (!serviceConfig) {\n      throw new Error(`Unknown service: ${serviceName}`);\n    }\n\n    const healthUrl = `${serviceConfig.url}${serviceConfig.endpoints.health}`;\n    const response = await apiClient.get(healthUrl);\n    \n    return {\n      service: serviceName,\n      status: (response.data.status === 'healthy' || response.data.status === 'ok' || response.status === 200) ? 'online' : 'offline',\n      lastCheck: new Date().toISOString(),\n      responseTime: response.headers['x-response-time'] || 'N/A',\n      data: response.data\n    };\n  } catch (error) {\n    return {\n      service: serviceName,\n      status: 'offline',\n      lastCheck: new Date().toISOString(),\n      error: error.message\n    };\n  }\n};\n\n// Check all services health\nexport const checkAllServicesHealth = async () => {\n  const services = Object.keys(API_CONFIG);\n  const results = await Promise.allSettled(\n    services.map(service => checkServiceHealth(service))\n  );\n  \n  const statuses = {};\n  results.forEach((result, index) => {\n    const serviceName = services[index];\n    if (result.status === 'fulfilled') {\n      statuses[getServiceDisplayName(serviceName)] = result.value;\n    } else {\n      statuses[getServiceDisplayName(serviceName)] = {\n        service: serviceName,\n        status: 'offline',\n        lastCheck: new Date().toISOString(),\n        error: result.reason?.message || 'Unknown error'\n      };\n    }\n  });\n  \n  return statuses;\n};\n\n// Get service statistics\nexport const getServiceStats = async (serviceName) => {\n  try {\n    const serviceConfig = API_CONFIG[serviceName];\n    if (!serviceConfig || !serviceConfig.endpoints.stats) {\n      throw new Error(`Stats endpoint not available for service: ${serviceName}`);\n    }\n\n    const statsUrl = `${serviceConfig.url}${serviceConfig.endpoints.stats}`;\n    const response = await apiClient.get(statsUrl);\n    return response.data;\n  } catch (error) {\n    console.warn(`Failed to fetch ${serviceName} stats:`, error.message);\n    return null;\n  }\n};\n\n// Get all service statistics\nexport const getAllServiceStats = async () => {\n  const stats = {\n    subscribers: 0,\n    content: 0,\n    scrapeJobs: 0,\n    aiJobs: 0\n  };\n\n  try {\n    // Fetch subscriber stats\n    const subscriberStats = await getServiceStats('subscriberManager');\n    if (subscriberStats) {\n      stats.subscribers = subscriberStats.total_subscribers || 0;\n    }\n  } catch (error) {\n    console.warn('Failed to fetch subscriber stats:', error.message);\n  }\n\n  try {\n    // Fetch scraper stats\n    const scraperStats = await getServiceStats('webScraper');\n    if (scraperStats) {\n      stats.scrapeJobs = scraperStats.stats?.total_jobs || scraperStats.total_jobs || 0;\n    }\n  } catch (error) {\n    console.warn('Failed to fetch scraper stats:', error.message);\n  }\n\n  try {\n    // Fetch content stats\n    const contentStats = await getServiceStats('contentManager');\n    if (contentStats) {\n      stats.content = contentStats.total_content || 0;\n    }\n  } catch (error) {\n    console.warn('Failed to fetch content stats:', error.message);\n  }\n\n  try {\n    // Fetch AI processor stats\n    const aiStats = await getServiceStats('aiProcessor');\n    if (aiStats) {\n      stats.aiJobs = aiStats.total_jobs || 0;\n    }\n  } catch (error) {\n    console.warn('Failed to fetch AI processor stats:', error.message);\n  }\n\n  return stats;\n};\n\n// Helper function to get display names for services\nconst getServiceDisplayName = (serviceName) => {\n  const displayNames = {\n    contentManager: 'Content Manager',\n    aiProcessor: 'AI Processor',\n    webScraper: 'Web Scraper',\n    distributor: 'Distributor',\n    subscriberManager: 'Subscriber Manager'\n  };\n  \n  return displayNames[serviceName] || serviceName;\n};\n\n// Generic API call function\nexport const makeApiCall = async (serviceName, endpoint, method = 'GET', data = null) => {\n  try {\n    const serviceConfig = API_CONFIG[serviceName];\n    if (!serviceConfig) {\n      throw new Error(`Unknown service: ${serviceName}`);\n    }\n\n    const url = `${serviceConfig.url}${serviceConfig.endpoints[endpoint] || endpoint}`;\n    const config = {\n      method,\n      url,\n      ...REQUEST_CONFIG\n    };\n\n    if (data && (method === 'POST' || method === 'PUT' || method === 'PATCH')) {\n      config.data = data;\n    }\n\n    const response = await axios(config);\n    return response.data;\n  } catch (error) {\n    console.error(`API call failed for ${serviceName}/${endpoint}:`, error.message);\n    throw error;\n  }\n};\n\nexport default apiClient;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}