{"ast":null,"code":"import React,{useState,useEffect}from'react';import{Card,Row,Col,Statistic,Alert,Spin,Badge,message}from'antd';import{UserOutlined,FileTextOutlined,RobotOutlined,GlobalOutlined,CheckCircleOutlined,ExclamationCircleOutlined,ReloadOutlined}from'@ant-design/icons';import{checkAllServicesHealth,getAllServiceStats}from'../utils/apiClient';import{HEALTH_CHECK_INTERVAL}from'../config/api';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Dashboard=()=>{const[loading,setLoading]=useState(true);const[serviceStatuses,setServiceStatuses]=useState({});const[stats,setStats]=useState({subscribers:0,content:0,scrapeJobs:0,aiJobs:0});useEffect(()=>{fetchDashboardData();const interval=setInterval(fetchDashboardData,HEALTH_CHECK_INTERVAL);return()=>clearInterval(interval);},[]);const fetchDashboardData=async()=>{try{setLoading(true);// Check all services health using the new API client\nconst[serviceStatuses,serviceStats]=await Promise.all([checkAllServicesHealth(),getAllServiceStats()]);setServiceStatuses(serviceStatuses);setStats(serviceStats);setLoading(false);}catch(error){console.error('Failed to fetch dashboard data:',error);message.error('Failed to load dashboard data. Please check your connection.');setLoading(false);}};const handleRefresh=async()=>{message.info('Refreshing dashboard data...');await fetchDashboardData();};const getStatusBadge=status=>{switch(status){case'online':return/*#__PURE__*/_jsx(Badge,{status:\"success\",text:\"Online\"});case'offline':return/*#__PURE__*/_jsx(Badge,{status:\"error\",text:\"Offline\"});default:return/*#__PURE__*/_jsx(Badge,{status:\"default\",text:\"Unknown\"});}};if(loading){return/*#__PURE__*/_jsx(\"div\",{style:{display:'flex',justifyContent:'center',alignItems:'center',height:'400px'},children:/*#__PURE__*/_jsx(Spin,{size:\"large\"})});}return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Alert,{message:\"AquaScene Content Engine Dashboard\",description:\"Monitor and manage your aquascaping content automation system\",type:\"info\",showIcon:true,style:{marginBottom:24}}),/*#__PURE__*/_jsxs(Row,{gutter:[16,16],style:{marginBottom:24},children:[/*#__PURE__*/_jsx(Col,{span:6,children:/*#__PURE__*/_jsx(Card,{children:/*#__PURE__*/_jsx(Statistic,{title:\"Total Subscribers\",value:stats.subscribers,prefix:/*#__PURE__*/_jsx(UserOutlined,{}),valueStyle:{color:'#3f8600'}})})}),/*#__PURE__*/_jsx(Col,{span:6,children:/*#__PURE__*/_jsx(Card,{children:/*#__PURE__*/_jsx(Statistic,{title:\"Content Items\",value:stats.content,prefix:/*#__PURE__*/_jsx(FileTextOutlined,{}),valueStyle:{color:'#1890ff'}})})}),/*#__PURE__*/_jsx(Col,{span:6,children:/*#__PURE__*/_jsx(Card,{children:/*#__PURE__*/_jsx(Statistic,{title:\"Scraping Jobs\",value:stats.scrapeJobs,prefix:/*#__PURE__*/_jsx(GlobalOutlined,{}),valueStyle:{color:'#722ed1'}})})}),/*#__PURE__*/_jsx(Col,{span:6,children:/*#__PURE__*/_jsx(Card,{children:/*#__PURE__*/_jsx(Statistic,{title:\"AI Processing Jobs\",value:stats.aiJobs,prefix:/*#__PURE__*/_jsx(RobotOutlined,{}),valueStyle:{color:'#fa8c16'}})})})]}),/*#__PURE__*/_jsx(Row,{gutter:[16,16],children:/*#__PURE__*/_jsx(Col,{span:24,children:/*#__PURE__*/_jsx(Card,{title:\"Service Status\",extra:/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',alignItems:'center',gap:'16px'},children:[/*#__PURE__*/_jsx(ReloadOutlined,{onClick:handleRefresh,style:{cursor:'pointer',color:'#1890ff',fontSize:'16px'},spin:loading,title:\"Refresh data\"}),/*#__PURE__*/_jsxs(\"span\",{style:{fontSize:'12px',color:'#666'},children:[\"Last updated: \",new Date().toLocaleTimeString()]})]}),children:/*#__PURE__*/_jsx(Row,{gutter:[16,16],children:Object.entries(serviceStatuses).map(_ref=>{let[serviceName,serviceData]=_ref;return/*#__PURE__*/_jsx(Col,{span:8,children:/*#__PURE__*/_jsx(Card,{size:\"small\",children:/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',justifyContent:'space-between',alignItems:'center'},children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"div\",{style:{fontWeight:'bold',marginBottom:4},children:serviceName}),getStatusBadge(serviceData.status)]}),/*#__PURE__*/_jsx(\"div\",{children:serviceData.status==='online'?/*#__PURE__*/_jsx(CheckCircleOutlined,{style:{color:'#52c41a',fontSize:'24px'}}):/*#__PURE__*/_jsx(ExclamationCircleOutlined,{style:{color:'#ff4d4f',fontSize:'24px'}})})]})})},serviceName);})})})})})]});};export default Dashboard;","map":{"version":3,"names":["React","useState","useEffect","Card","Row","Col","Statistic","Alert","Spin","Badge","message","UserOutlined","FileTextOutlined","RobotOutlined","GlobalOutlined","CheckCircleOutlined","ExclamationCircleOutlined","ReloadOutlined","checkAllServicesHealth","getAllServiceStats","HEALTH_CHECK_INTERVAL","jsx","_jsx","jsxs","_jsxs","Dashboard","loading","setLoading","serviceStatuses","setServiceStatuses","stats","setStats","subscribers","content","scrapeJobs","aiJobs","fetchDashboardData","interval","setInterval","clearInterval","serviceStats","Promise","all","error","console","handleRefresh","info","getStatusBadge","status","text","style","display","justifyContent","alignItems","height","children","size","description","type","showIcon","marginBottom","gutter","span","title","value","prefix","valueStyle","color","extra","gap","onClick","cursor","fontSize","spin","Date","toLocaleTimeString","Object","entries","map","_ref","serviceName","serviceData","fontWeight"],"sources":["/Users/kg/aquascene-content-engine/admin-dashboard/src/components/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Card, Row, Col, Statistic, Alert, Spin, Badge, message } from 'antd';\nimport {\n  UserOutlined,\n  FileTextOutlined,\n  RobotOutlined,\n  GlobalOutlined,\n  CheckCircleOutlined,\n  ExclamationCircleOutlined,\n  ReloadOutlined\n} from '@ant-design/icons';\nimport { checkAllServicesHealth, getAllServiceStats } from '../utils/apiClient';\nimport { HEALTH_CHECK_INTERVAL } from '../config/api';\n\nconst Dashboard = () => {\n  const [loading, setLoading] = useState(true);\n  const [serviceStatuses, setServiceStatuses] = useState({});\n  const [stats, setStats] = useState({\n    subscribers: 0,\n    content: 0,\n    scrapeJobs: 0,\n    aiJobs: 0\n  });\n\n  useEffect(() => {\n    fetchDashboardData();\n    const interval = setInterval(fetchDashboardData, HEALTH_CHECK_INTERVAL);\n    return () => clearInterval(interval);\n  }, []);\n\n  const fetchDashboardData = async () => {\n    try {\n      setLoading(true);\n      \n      // Check all services health using the new API client\n      const [serviceStatuses, serviceStats] = await Promise.all([\n        checkAllServicesHealth(),\n        getAllServiceStats()\n      ]);\n\n      setServiceStatuses(serviceStatuses);\n      setStats(serviceStats);\n      setLoading(false);\n    } catch (error) {\n      console.error('Failed to fetch dashboard data:', error);\n      message.error('Failed to load dashboard data. Please check your connection.');\n      setLoading(false);\n    }\n  };\n\n  const handleRefresh = async () => {\n    message.info('Refreshing dashboard data...');\n    await fetchDashboardData();\n  };\n\n  const getStatusBadge = (status) => {\n    switch (status) {\n      case 'online':\n        return <Badge status=\"success\" text=\"Online\" />;\n      case 'offline':\n        return <Badge status=\"error\" text=\"Offline\" />;\n      default:\n        return <Badge status=\"default\" text=\"Unknown\" />;\n    }\n  };\n\n  if (loading) {\n    return (\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '400px' }}>\n        <Spin size=\"large\" />\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <Alert\n        message=\"AquaScene Content Engine Dashboard\"\n        description=\"Monitor and manage your aquascaping content automation system\"\n        type=\"info\"\n        showIcon\n        style={{ marginBottom: 24 }}\n      />\n\n      <Row gutter={[16, 16]} style={{ marginBottom: 24 }}>\n        <Col span={6}>\n          <Card>\n            <Statistic\n              title=\"Total Subscribers\"\n              value={stats.subscribers}\n              prefix={<UserOutlined />}\n              valueStyle={{ color: '#3f8600' }}\n            />\n          </Card>\n        </Col>\n        <Col span={6}>\n          <Card>\n            <Statistic\n              title=\"Content Items\"\n              value={stats.content}\n              prefix={<FileTextOutlined />}\n              valueStyle={{ color: '#1890ff' }}\n            />\n          </Card>\n        </Col>\n        <Col span={6}>\n          <Card>\n            <Statistic\n              title=\"Scraping Jobs\"\n              value={stats.scrapeJobs}\n              prefix={<GlobalOutlined />}\n              valueStyle={{ color: '#722ed1' }}\n            />\n          </Card>\n        </Col>\n        <Col span={6}>\n          <Card>\n            <Statistic\n              title=\"AI Processing Jobs\"\n              value={stats.aiJobs}\n              prefix={<RobotOutlined />}\n              valueStyle={{ color: '#fa8c16' }}\n            />\n          </Card>\n        </Col>\n      </Row>\n\n      <Row gutter={[16, 16]}>\n        <Col span={24}>\n          <Card \n            title=\"Service Status\" \n            extra={\n              <div style={{ display: 'flex', alignItems: 'center', gap: '16px' }}>\n                <ReloadOutlined \n                  onClick={handleRefresh}\n                  style={{ \n                    cursor: 'pointer', \n                    color: '#1890ff',\n                    fontSize: '16px'\n                  }}\n                  spin={loading}\n                  title=\"Refresh data\"\n                />\n                <span style={{ fontSize: '12px', color: '#666' }}>\n                  Last updated: {new Date().toLocaleTimeString()}\n                </span>\n              </div>\n            }\n          >\n            <Row gutter={[16, 16]}>\n              {Object.entries(serviceStatuses).map(([serviceName, serviceData]) => (\n                <Col span={8} key={serviceName}>\n                  <Card size=\"small\">\n                    <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n                      <div>\n                        <div style={{ fontWeight: 'bold', marginBottom: 4 }}>{serviceName}</div>\n                        {getStatusBadge(serviceData.status)}\n                      </div>\n                      <div>\n                        {serviceData.status === 'online' ? (\n                          <CheckCircleOutlined style={{ color: '#52c41a', fontSize: '24px' }} />\n                        ) : (\n                          <ExclamationCircleOutlined style={{ color: '#ff4d4f', fontSize: '24px' }} />\n                        )}\n                      </div>\n                    </div>\n                  </Card>\n                </Col>\n              ))}\n            </Row>\n          </Card>\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nexport default Dashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}