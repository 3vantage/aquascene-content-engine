# AquaScape Content Engine - Development Environment
# Version: 1.0
# Complete local development setup with all services

version: '3.8'

networks:
  content-engine:
    driver: bridge
  monitoring:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  nginx_certs:
  backup_data:
  minio_data:

services:
  # ===================
  # DATABASE SERVICES
  # ===================
  
  postgres:
    image: postgres:15
    container_name: content-engine-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-content_engine}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_MULTIPLE_DATABASES: ${DB_NAME:-content_engine},content_engine_test
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/database/init:/docker-entrypoint-initdb.d:ro
      - ./infrastructure/database/backups:/backups
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - content-engine
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-content_engine}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  redis:
    image: redis:7-alpine
    container_name: content-engine-redis
    restart: unless-stopped
    command: >
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
      - ./infrastructure/redis/redis.conf:/etc/redis/redis.conf:ro
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - content-engine
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # ===================
  # STORAGE SERVICES
  # ===================
  
  minio:
    image: minio/minio:latest
    container_name: content-engine-minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-admin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - content-engine
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # ===================
  # CORE SERVICES
  # ===================
  
  content-manager:
    build:
      context: ./services/content-manager
      dockerfile: Dockerfile
      target: development
    container_name: content-engine-api
    restart: unless-stopped
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://${DB_USER:-postgres}:${DB_PASSWORD}@postgres:5432/${DB_NAME:-content_engine}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER:-admin}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD}
    volumes:
      - ./services/content-manager:/app
      - ./shared:/app/shared:ro
    ports:
      - "${API_PORT:-8000}:8000"
    networks:
      - content-engine
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  ai-processor:
    build:
      context: ./services/ai-processor
      dockerfile: Dockerfile
      target: development
    container_name: content-engine-ai
    restart: unless-stopped
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://${DB_USER:-postgres}:${DB_PASSWORD}@postgres:5432/${DB_NAME:-content_engine}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/1
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - OLLAMA_BASE_URL=${OLLAMA_BASE_URL:-http://ollama:11434}
    volumes:
      - ./services/ai-processor:/app
      - ./shared:/app/shared:ro
    ports:
      - "${AI_PORT:-8001}:8001"
    networks:
      - content-engine
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  web-scraper:
    build:
      context: ./services/web-scraper
      dockerfile: Dockerfile
      target: development
    container_name: content-engine-scraper
    restart: unless-stopped
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://${DB_USER:-postgres}:${DB_PASSWORD}@postgres:5432/${DB_NAME:-content_engine}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/2
      - SCRAPER_USER_AGENT=${SCRAPER_USER_AGENT:-AquaSceneBot/1.0}
      - SCRAPER_DELAY=${SCRAPER_DELAY:-2}
    volumes:
      - ./services/web-scraper:/app
      - ./shared:/app/shared:ro
    ports:
      - "${SCRAPER_PORT:-8002}:8002"
    networks:
      - content-engine
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  distributor:
    build:
      context: ./services/distributor
      dockerfile: Dockerfile
      target: development
    container_name: content-engine-distributor
    restart: unless-stopped
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://${DB_USER:-postgres}:${DB_PASSWORD}@postgres:5432/${DB_NAME:-content_engine}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/3
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - INSTAGRAM_ACCESS_TOKEN=${INSTAGRAM_ACCESS_TOKEN}
      - INSTAGRAM_BUSINESS_ACCOUNT_ID=${INSTAGRAM_BUSINESS_ACCOUNT_ID}
    volumes:
      - ./services/distributor:/app
      - ./shared:/app/shared:ro
    ports:
      - "${DISTRIBUTOR_PORT:-8003}:8003"
    networks:
      - content-engine
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  subscriber-manager:
    build:
      context: ./services/subscriber-manager
      dockerfile: Dockerfile
      target: development
    container_name: content-engine-subscribers
    restart: unless-stopped
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://${DB_USER:-postgres}:${DB_PASSWORD}@postgres:5432/${DB_NAME:-content_engine}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/4
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - JWT_SECRET=${JWT_SECRET}
    volumes:
      - ./services/subscriber-manager:/app
      - ./shared:/app/shared:ro
    ports:
      - "${SUBSCRIBER_PORT:-8004}:8004"
    networks:
      - content-engine
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ===================
  # ADMIN DASHBOARD
  # ===================
  
  admin-dashboard:
    build:
      context: ./admin-dashboard
      dockerfile: Dockerfile
      target: development
    container_name: content-engine-admin
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://localhost:${API_PORT:-8000}
      - REACT_APP_AI_SERVICE_URL=http://localhost:${AI_PORT:-8001}
      - REACT_APP_SCRAPER_URL=http://localhost:${SCRAPER_PORT:-8002}
      - REACT_APP_DISTRIBUTOR_URL=http://localhost:${DISTRIBUTOR_PORT:-8003}
      - REACT_APP_SUBSCRIBER_URL=http://localhost:${SUBSCRIBER_PORT:-8004}
      - WATCHPACK_POLLING=true
    volumes:
      - ./admin-dashboard:/app
      - /app/node_modules
    ports:
      - "${ADMIN_PORT:-3001}:3000"
    networks:
      - content-engine
    depends_on:
      - content-manager
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ===================
  # OPTIONAL SERVICES
  # ===================
  
  ollama:
    image: ollama/ollama:latest
    container_name: content-engine-ollama
    restart: unless-stopped
    profiles: ["local-llm"]
    volumes:
      - ./data/ollama:/root/.ollama
    ports:
      - "11434:11434"
    networks:
      - content-engine
    environment:
      - OLLAMA_KEEP_ALIVE=24h
      - OLLAMA_HOST=0.0.0.0:11434

  # ===================
  # REVERSE PROXY
  # ===================
  
  nginx:
    image: nginx:alpine
    container_name: content-engine-nginx
    restart: unless-stopped
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infrastructure/nginx/conf.d:/etc/nginx/conf.d:ro
      - nginx_certs:/etc/nginx/certs
      - ./infrastructure/nginx/html:/usr/share/nginx/html:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - content-engine
    depends_on:
      - content-manager
      - admin-dashboard
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 5s
      retries: 3

  # ===================
  # MONITORING STACK
  # ===================
  
  prometheus:
    image: prom/prometheus:latest
    container_name: content-engine-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./infrastructure/monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./infrastructure/monitoring/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - content-engine
      - monitoring
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  grafana:
    image: grafana/grafana:latest
    container_name: content-engine-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_INSTALL_PLUGINS=redis-datasource
      - GF_FEATURE_TOGGLES_ENABLE=publicDashboards
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./infrastructure/monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    ports:
      - "3000:3000"
    networks:
      - content-engine
      - monitoring
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  node-exporter:
    image: prom/node-exporter:latest
    container_name: content-engine-node-exporter
    restart: unless-stopped
    command:
      - '--path.rootfs=/host'
    volumes:
      - '/:/host:ro,rslave'
    ports:
      - "9100:9100"
    networks:
      - monitoring

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: content-engine-cadvisor
    restart: unless-stopped
    privileged: true
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    ports:
      - "8080:8080"
    networks:
      - monitoring
    devices:
      - /dev/kmsg

  # ===================
  # BACKUP SERVICE
  # ===================
  
  backup-service:
    build:
      context: ./infrastructure/backup
      dockerfile: Dockerfile
    container_name: content-engine-backup
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://${DB_USER:-postgres}:${DB_PASSWORD}@postgres:5432/${DB_NAME:-content_engine}
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 2 * * *}
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-30}
      - S3_ENDPOINT=${S3_ENDPOINT}
      - S3_ACCESS_KEY=${S3_ACCESS_KEY}
      - S3_SECRET_KEY=${S3_SECRET_KEY}
      - S3_BUCKET=${S3_BACKUP_BUCKET:-content-engine-backups}
    volumes:
      - backup_data:/backups
      - ./infrastructure/database/backups:/database-backups
    networks:
      - content-engine
    depends_on:
      postgres:
        condition: service_healthy

  # ===================
  # LOG AGGREGATION
  # ===================
  
  loki:
    image: grafana/loki:latest
    container_name: content-engine-loki
    restart: unless-stopped
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./infrastructure/logging/loki.yml:/etc/loki/local-config.yaml:ro
    ports:
      - "3100:3100"
    networks:
      - monitoring

  promtail:
    image: grafana/promtail:latest
    container_name: content-engine-promtail
    restart: unless-stopped
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - ./infrastructure/logging/promtail.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    networks:
      - monitoring
    depends_on:
      - loki
      
  # ===================
  # E2E TESTING
  # ===================
  
  e2e-testing:
    build:
      context: ./services/e2e-testing
      dockerfile: Dockerfile
    container_name: content-engine-e2e-tests
    profiles: ["testing"]
    environment:
      - ENVIRONMENT=testing
    networks:
      - content-engine
      - monitoring
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      nginx:
        condition: service_healthy