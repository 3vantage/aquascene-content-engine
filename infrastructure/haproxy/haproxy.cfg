# AquaScene Content Engine - HAProxy Configuration (Production)
# Version: 1.0

global
    # Process management
    daemon
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin
    stats timeout 30s
    user haproxy
    group haproxy
    
    # Logging
    log 127.0.0.1:514 local0
    log-tag aquascene-haproxy
    
    # SSL/TLS settings
    ssl-default-bind-ciphers ECDHE+AESGCM:ECDHE+CHACHA20:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets
    ssl-default-server-ciphers ECDHE+AESGCM:ECDHE+CHACHA20:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS
    ssl-default-server-options ssl-min-ver TLSv1.2 no-tls-tickets
    
    # Performance tuning
    tune.ssl.default-dh-param 2048
    tune.bufsize 32768
    tune.maxrewrite 1024

defaults
    # Operating mode
    mode http
    
    # Logging
    log global
    option httplog
    option dontlognull
    option log-health-checks
    
    # Performance
    option http-server-close
    option forwardfor except 127.0.0.0/8
    option redispatch
    
    # Timeouts
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms
    timeout http-request 10000ms
    timeout http-keep-alive 2000ms
    timeout check 5000ms
    
    # Error handling
    retries 3
    option abortonclose
    
    # Health checks
    default-server inter 2000ms downinter 5000ms rise 2 fall 3

# Statistics page
frontend stats
    bind *:8404
    mode http
    stats enable
    stats uri /stats
    stats refresh 30s
    stats admin if TRUE
    stats auth admin:${HAPROXY_STATS_PASSWORD}

# Frontend - HTTP (redirect to HTTPS)
frontend http_frontend
    bind *:80
    mode http
    
    # Logging
    capture request header Host len 32
    capture request header User-Agent len 64
    
    # Let's Encrypt ACME challenges
    acl acme_challenge path_beg /.well-known/acme-challenge/
    use_backend letsencrypt if acme_challenge
    
    # Redirect all other HTTP traffic to HTTPS
    redirect scheme https if !{ ssl_fc }

# Frontend - HTTPS
frontend https_frontend
    bind *:443 ssl crt /etc/ssl/certs/aquascene.com.pem alpn h2,http/1.1
    mode http
    
    # Logging and monitoring
    capture request header Host len 32
    capture request header User-Agent len 64
    capture request header X-Forwarded-For len 64
    
    # Security headers
    http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
    http-response set-header X-Frame-Options "SAMEORIGIN"
    http-response set-header X-Content-Type-Options "nosniff"
    http-response set-header X-XSS-Protection "1; mode=block"
    http-response set-header Referrer-Policy "strict-origin-when-cross-origin"
    
    # Rate limiting
    stick-table type ip size 100k expire 30s store http_req_rate(10s)
    http-request track-sc0 src
    http-request deny if { sc_http_req_rate(0) gt 20 }
    
    # Host-based routing
    acl is_api hdr(host) -i api.aquascene.com
    acl is_admin hdr(host) -i admin.aquascene.com
    acl is_monitoring hdr(host) -i monitoring.aquascene.com
    acl is_storage hdr(host) -i storage.aquascene.com
    
    # Path-based routing
    acl is_api_path path_beg /api/
    acl is_ai_path path_beg /ai/
    acl is_scraper_path path_beg /scraper/
    acl is_distributor_path path_beg /distributor/
    acl is_subscriber_path path_beg /subscribers/
    acl is_health_check path /health
    
    # Backend selection
    use_backend api_backend if is_api or is_api_path
    use_backend ai_backend if is_ai_path
    use_backend scraper_backend if is_scraper_path
    use_backend distributor_backend if is_distributor_path
    use_backend subscriber_backend if is_subscriber_path
    use_backend admin_backend if is_admin
    use_backend monitoring_backend if is_monitoring
    use_backend storage_backend if is_storage
    use_backend health_backend if is_health_check
    
    # Default backend
    default_backend api_backend

# Backends
backend api_backend
    mode http
    balance roundrobin
    option httpchk GET /health
    http-check expect status 200
    
    # Content Manager instances
    server content-manager-1 172.20.0.100:8000 check weight 100
    server content-manager-2 172.20.0.101:8000 check weight 100
    
    # Connection pooling
    http-reuse aggressive

backend ai_backend
    mode http
    balance leastconn
    option httpchk GET /health
    http-check expect status 200
    timeout server 300000ms
    
    # AI Processor instances
    server ai-processor-1 172.20.0.110:8001 check weight 100
    server ai-processor-2 172.20.0.111:8001 check weight 100
    
    # Sticky sessions for long-running AI tasks
    cookie SERVERID insert indirect nocache

backend scraper_backend
    mode http
    balance source
    option httpchk GET /health
    http-check expect status 200
    
    server web-scraper 172.20.0.120:8002 check weight 100

backend distributor_backend
    mode http
    balance roundrobin
    option httpchk GET /health
    http-check expect status 200
    timeout server 120000ms
    
    server distributor 172.20.0.130:8003 check weight 100

backend subscriber_backend
    mode http
    balance roundrobin
    option httpchk GET /health
    http-check expect status 200
    
    server subscriber-manager 172.20.0.140:8004 check weight 100

backend admin_backend
    mode http
    balance roundrobin
    option httpchk GET /
    http-check expect status 200
    timeout server 86400000ms
    
    server admin-dashboard 172.20.0.150:3000 check weight 100

backend monitoring_backend
    mode http
    balance roundrobin
    
    # Basic auth for monitoring access
    acl auth_ok http_auth(monitoring_users)
    http-request auth unless auth_ok
    
    server grafana 172.20.0.201:3000 check weight 100

backend storage_backend
    mode http
    balance roundrobin
    option httpchk GET /minio/health/live
    http-check expect status 200
    
    server minio 172.20.0.30:9000 check weight 100

backend health_backend
    mode http
    http-request return status 200 content-type text/plain string "healthy"

backend letsencrypt
    mode http
    server letsencrypt 127.0.0.1:8888

# User lists for authentication
userlist monitoring_users
    user admin password ${MONITORING_PASSWORD}
    user readonly password ${MONITORING_READONLY_PASSWORD}

# Error handling
errorfile 400 /etc/haproxy/errors/400.http
errorfile 403 /etc/haproxy/errors/403.http
errorfile 408 /etc/haproxy/errors/408.http
errorfile 500 /etc/haproxy/errors/500.http
errorfile 502 /etc/haproxy/errors/502.http
errorfile 503 /etc/haproxy/errors/503.http
errorfile 504 /etc/haproxy/errors/504.http